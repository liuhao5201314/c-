#define _CRT_SECURE_NO_WARNINGS 1
//对于数组的学习，数组的创建
//int arr[10];
//char arr2[5];//[]内部必须为常量
//int arr[10]={1,2,3}//不完全初始化
//char arr2[5]={'a','b'};=char arr2[5]={'a',93};//给了ab后面默认为0
//char arr3[5]="ab";//给了ab和\0但是\0就是0所以还是3个0
//char arr4[]="abcdef";7个字符\0
/*
#include<stdio.h>
#include<string.h>
int main()
{
	char arr[] = "abcdef";
	printf("%d\n", sizeof(arr));//7计算所占空间大小7*1
	printf("%d\n", strlen(arr));//6计算字符串长度\0之前
}
*/
//区分sizeof和strlen
/*
#include<stdio.h>
#include<string.h>
int main()
{
	char arr1[] = "abc";
	char arr2[] = { 'a','b','c' };
	printf("%d\n", sizeof(arr1));//4
	printf("%d\n", sizeof(arr2));//3
	printf("%d\n", strlen(arr1));//3
	printf("%d\n", strlen(arr2));//3这里错误因为没有检测到\0所以没有停下来所以为未知
}
*/
//对于一维数组的使用
//%p打印地址
//数组在内存中是连续存放的
/*
#include<stdio.h>
int main()
{
	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	int i = 0;
	for (i = 0; i < sz; i++)
	{
		printf("&arr[%d]=%p\n",i, &arr[i]);//内部相差4为int占的空间大小
	}
	return 0;
}
*/

//二维数组的创建和初始化

//int arr[3][4];
/*
#include<stdio.h>

int main()
{
	int arr[3][4] = { {1,2,3},{4,5 } };//存放3行4列默认是第一行装填满后然后进入下一行进行装填，但是这样书写后就会括号一在第一行括号2在第二行，
	//二维数组不能不进行不定义必须定义几行几列
	//行有时可以进行省略但是列一定不能省略
	int i = 0;
	int j = 0;
	for (i = 0; i < 3;i++)
	{
		for (j = 0; j < 4; j++)
		{
			printf("&arr[%d][%d]=%p\n", i,j,&arr[i][j]);
		}
		printf("\n");
	}
}
*/



//冒泡排序法
//对数字进行排序
/*
#include<stdio.h>

void bubble_sort(int arr[],int sz)//这里把int arr[]=int* arr
{
	int i = 0;
	int j = 0;
	for (i = 0; i < sz - 1; i++)//进行冒泡排序的趟数10个数就要进行9趟
	{
		int flag = 1;//假设一趟排序为顺序，关于flag就是进行程序优化避免出现顺序了计算机还在进行计算
		for (j = 0; j < sz - 1 - i; j++)//这里是进行冒泡对数，比如第一趟就要进行9对比较
		{
			if (arr[j] > arr[j + 1])//进行对比进行交换
			{
				int tem = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = tem;
				flag = 0;//本趟排序没有顺序
			}		
		}
		if (flag == 1)//防止没有必要的运算一旦flag为1那么就说明没有进入对比环节该数组已经有序就可以退出了
		{
			break;//break 作用于for和switch这里的break是作用于for循环不是if
		}
	}
}
int main()
{
	int arr[] = { 9,8,7,6,5,4,3,2,1,0 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	int x = 0;
	bubble_sort(arr,sz);//数组传递过去为一个指针所以在函数那边加上一个*就可以把对应数字传递过去
	for (x = 0; x < sz; x++)
	{
		printf("%d ", arr[x]);
	}
}
*/


//对于数组名的讨论
//arr传递为为数组的地址
/*
#include<stdio.h>
int main()
{
	int arr[] = { 1,2,3,4,5,6,7,8,9 };
	printf("%p\n", arr);
	printf("%p\n", &arr[0]);//通过这个程序结果相同说明了数组输出参数为数组首地址
	printf("%d", *arr);
}
*/


//数组名为首元素地址二个例外
//1.sizeof(数组名)---计算的是整个数组的大小单位为字节
//sizeof(arr)/sizeof(arr[0])
//2.&取地址数组名，数组名代表整个数组的地址从这里开始和首位置地址不同
//除开上面二个情况其余全部都为数组名代表数组首地址
/*
#include<stdio.h>
int main()
{
	int arr[] = { 1,2,3,4,5,6,7,8,9 };
	printf("%p ", arr);//输出为数组首地址
	printf("%p\n", arr+1);//输出数组第二个地址加了4
	printf("%p ", &arr[0]);//输出数组首地址
	printf("%p\n", &arr[0]+1);
	printf("%p ", &arr);//输出数组全部地址
	printf("%p\n", &arr+1);//整个地址结束后一位加了4*9=36
}
*/

